name: Prepare release
# yamllint disable-line rule:truthy
on:
  workflow_dispatch:
    inputs:
      dev_branch:
        type: choice
        options:
          - '7.0'
          - '7.1'
          - '7.2'
          - '8.0'
        default: '8.0'
        description: 'Development branch'
      version:
        type: string
        default: '8.0.0'
        description: 'Release version'
      php_versions:
        type: string
        default: '["8.0","8.1","8.2","8.3"]'
        description: 'PHP versions to run composer with'
      MYSQL_version:
        type: string
        default: '8.0.36'
        description: 'One MySQL version for the SDK'
  
      runs_on:
        type: string
        description: 'JSON string/array describing the runner'
        required: true
        default: '["ubuntu-latest"]'

jobs:
  prepare_release:
    runs-on: 'ubuntu-latest'
    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@v4
        with:
          ref: 'b-${{ inputs.dev_branch }}'
          path: 'repo'
          fetch-depth: 0

      - name: Validate version
        run: |
          # Validate version
          cd repo
          CHECK=$(git tag --list|grep "v${{inputs.version}}"||true)
          if [ -n "${CHECK}" ]; then
            cat <<EOF
          *******************************************************************
          * Tag v${{inputs.version}} already exists. Aborting
          *******************************************************************
          EOF
            exit 1
          fi

      - name: 'Create release'
        run: |
          # Checkout starting branch
          cd repo
          git config --global user.email "no-reply@oxid-esales.com"
          git config --global user.name "${{ github.actor }}"
          git checkout '${{ inputs.dev_branch }}'
          git pull

      - name: Generate a token
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.ACTIONS_RELEASE_APP_ID }}
          private-key: ${{ secrets.ACTIONS_RELEASE_APP_PRIVATE_KEY }}

      - name: Create branch and Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ steps.generate_token.outputs.token }}
          path: 'repo'
          branch: 'release_${{inputs.version}}'
          title: 'Prepare release ${{inputs.version}}'

  build_testplan:
    runs-on: ${{ fromJson(inputs.runs_on) }}
    outputs:
      testplan: '${{ steps.build.outputs.testplan }}'
    steps:
      - name: 'Build matrix'
        id: build
        run: |
          # Build matrix
          # shellcheck disable=SC2088
          case '${{ inputs.dev_branch}}' in
            "7.0") PRE="~/defaults/7.0.x.yaml," ;;
            "7.1") PRE="~/defaults/7.1.x.yaml," ;;
            "7.2") PRE="~/defaults/7.2.x.yaml," ;;
            "8.0") PRE="~/defaults/8.0.x.yaml," ;;
            *)
              echo "Illegal choice, fix the workflow"
              exit 1
              ;;
          esac
          if [ -z "${TESTPLAN}" ]; then
            # shellcheck disable=SC2088
            TESTPLAN="${PRE}${LIMIT}~/metapackage-${{inputs.dev_branch}}-slim.yaml,~/_custom.yaml"
          fi
          echo "testplan=${TESTPLAN}" | tee -a "${GITHUB_OUTPUT}"

  init:
    needs: build_testplan
    runs-on: ${{ fromJSON(inputs.runs_on) }}
    steps:
      - name: 'Checkout testplan defaults'
        uses: actions/checkout@v4
        with:
          repository: 'OXID-eSales/github-actions'
          ref: 'v4'
          path: 'defaults'
          sparse-checkout: '.github/oxid-esales/defaults'

      - name: 'Checkout testplans'
        uses: actions/checkout@v4
        with:
          ref: 'release_${{inputs.version}}'
          sparse-checkout: |
            '.github/oxid-esales'
            composer.json
          path: workflow

      - name: 'Consolidate plans'
        id: consolidate_plans
        run: |
          mkdir -p '.github/oxid-esales/defaults'
          if [ -d workflow/.github/oxid-esales ]; then
            mv workflow/.github/oxid-esales/* '.github/oxid-esales/'
            /bin/rm -r 'workflow/.github/oxid-esales'
          fi
          if [ -f workflow/composer.json ]; then
            mv workflow/composer.json '.github/oxid-esales/'
          fi
          mv defaults/.github/oxid-esales/defaults/* '.github/oxid-esales/defaults/'
          cat >'.github/oxid-esales/_custom.yaml' <<'EOF'
          # Setting the php versions array
          install:
            matrix:
              php: '${{ inputs.php_versions}}'
              mysql: '["${{ inputs.mysql_version}}"]'
          EOF

          TESTPLAN=$(echo "${{ needs.build_testplan.outputs.testplan }}"|sed -e 's|~|.github/oxid-esales|g')
          # ToDo: Remove the ,.github/oxid-esales/defaults/_rename.yaml when releasing v5
          DEFAULTS=".github/oxid-esales/defaults/defaults_light.yaml"
          echo "testplan=${DEFAULTS},${TESTPLAN},.github/oxid-esales/defaults/_rename.yaml" >>"${GITHUB_OUTPUT}"

      - name: 'Load Testplan'
        id: ltp
        uses: 'joernott/load_testplan@v1'
        with:
          files: '${{ steps.consolidate_plans.outputs.testplan }}'
          set_output: true
          set_env: true
          set_print: true
          loglevel: info
          logfile: load_testplan_init.log
          yaml: generated_testplan.yaml

      - name: 'Prepare artifact and generate safe title'
        id: post_ltp
        if: always()
        run: |
          cp "${GITHUB_OUTPUT}" generated_output.txt
          cp "${GITHUB_ENV}" generated_env.txt
          echo 'title=${{steps.ltp.outputs.global_title}}'| \
            sed -E 's#\s|\~|"|,|:|<|>|\||\*|\?|\/|\\#_#g' | \
            sed -e 's#\-\-*#-#' -e 's#\_\_*#_#g'| \
            tee -a "${GITHUB_OUTPUT}"

      - name: Cache testplan on S3
        if: ${{ inputs.runs_on != '"ubuntu-latest"'}}
        uses: tespkg/actions-cache/save@v1
        with:
          path: |
            .github/oxid-esales/*
          key: '${{ steps.ltp.outputs.init_cache_name }}'
          endpoint: ${{ secrets.CACHE_ENDPOINT }}
          accessKey: ${{ secrets.CACHE_ACCESS_KEY }}
          secretKey: ${{ secrets.CACHE_SECRET_KEY }}
          bucket: ${{ steps.ltp.outputs.init_cache_bucket }}

      - name: Cache testplan on Github
        if: ${{ inputs.runs_on == '"ubuntu-latest"'}}
        uses: actions/cache/save@v4
        with:
          path: |
            .github/oxid-esales/*
          key: '${{ steps.ltp.outputs.init_cache_name }}'

      - name: Install missing python3-yaml on private runners
        if: ${{ inputs.runs_on != '"ubuntu-latest"'}}
        shell: bash
        run: |
            sudo DEBIAN_FRONTEND=noninteractive apt-get -qq update
            sudo apt-get -qq install python3-yaml

    outputs:
      debug: ''
      use_private_cache: ${{ inputs.runs_on != '"ubuntu-latest"'}}
      global_title: ${{ steps.post_ltp.outputs.title }}
      # init variables
      testplan: ${{ steps.consolidate_plans.outputs.testplan }}
      init_cache_bucket: ${{ steps.ltp.outputs.init_cache_bucket }}
      init_cache_name: ${{ steps.ltp.outputs.init_cache_name }}
      # install variables
      install_matrix_mysql: ${{ steps.ltp.outputs.install_matrix_mysql }}
      install_matrix_php: ${{ steps.ltp.outputs.install_matrix_php }}
      install_max_parallel: ${{ steps.ltp.outputs.install_max_parallel }}

  install:
    needs: init
    strategy:
      matrix:
        php: ${{ fromJSON(needs.init.outputs.install_matrix_php) }}
        mysql: ${{ fromJSON(needs.init.outputs.install_matrix_mysql) }}
      fail-fast: false
      max-parallel: ${{ fromJSON(needs.init.outputs.install_max_parallel) }}
    runs-on: ${{ fromJSON(inputs.runs_on) }}

    steps:
      - name: Load cached testplan
        id: itn
        uses: OXID-eSales/github-actions/load_cached_testplan@v4
        with:
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          prefix: '${{ needs.init.outputs.global_title }}'
          root_testplan: ${{ needs.init.outputs.testplan }}
          matrix_testplan: ''
          plan_folder: ${{ inputs.plan_folder }}
          cache_name: ${{ needs.init.outputs.init_cache_name }}
          cache_endpoint: ${{ secrets.CACHE_ENDPOINT }}
          cache_access_key: ${{ secrets.CACHE_ACCESS_KEY }}
          cache_secret_key: ${{ secrets.CACHE_SECRET_KEY }}
          cache_bucket: ${{ needs.init.outputs.init_cache_bucket }}
          debug: ${{ needs.init.outputs.debug }}

      - name: 'Load Testplan'
        id: iltp
        uses: 'joernott/load_testplan@v1'
        with:
          files: '${{steps.itn.outputs.testplan}}'
          set_output: true
          set_print: true
          set_env: true
          yaml: generated_testplan.yaml
          loglevel: info
          logfile: load_testplan_install.log
          token: ${{ secrets.enterprise_github_token }}

      - name: 'Prepare Shop'
        id: prepare_shop
        uses: 'OXID-eSales/github-actions/prepare_shop@v4'
        with:
          container_name: ${{ steps.iltp.outputs.install_container_name }}
          container_options: ${{ steps.iltp.outputs.install_container_options }}
          container_method: ${{ steps.iltp.outputs.install_container_method }}
          docker_login: ${{ steps.iltp.outputs.install_docker_login }}
          docker_user: ${{ secrets.DOCKER_HUB_USER }}
          docker_token: ${{ secrets.DOCKER_HUB_TOKEN }}
          # Deprecated, use git_sdk_repository instead. This will be removed in in v5
          git_sdk_url: ${{ steps.iltp.outputs.install_git_sdk_url }}
          git_sdk_repository: ${{ steps.iltp.outputs.install_git_sdk_repository }}
          git_sdk_ref: ${{ steps.iltp.outputs.install_git_sdk_ref }}
          # Deprecated, use git_repository instead. This will be removed in in v5
          git_shop_url: ${{ steps.iltp.outputs.install_git_shop_url }}
          # Deprecated, use git_ref instead. This will be removed in in v5
          git_shop_ref: ${{ steps.iltp.outputs.install_git_shop_ref }}
          git_repository: ${{ steps.iltp.outputs.install_git_repository }}
          git_ref: ${{ steps.iltp.outputs.install_git_ref }}
          compilation_url: ${{ steps.iltp.outputs.install_composer_root_url }}
          github_ref_name: ${{ github.ref_name }}
          php: ${{ matrix.php }}
          mysql: ${{ matrix.mysql }}
          custom_ini_error_reporting: ${{ steps.iltp.outputs.install_custom_ini_error_reporting }}
          custom_ini_xdebug: ${{ steps.iltp.outputs.install_custom_ini_xdebug }}
          add_services: ${{ steps.iltp.outputs.install_add_services }}
          composer_file: ${{ steps.iltp.outputs.install_composer_file }}
          composer_transform: ${{ steps.iltp.outputs.install_composer_transform}}
          composer_backup: ${{ steps.iltp.outputs.install_composer_backup}}
          composer_update: ${{ steps.iltp.outputs.install_composer_update}}
          composer_update_options: ${{ steps.iltp.outputs.install_composer_update_options}}
          composer_dev_ref: ${{ steps.iltp.outputs.install_composer_dev_ref}}
          enterprise_github_token: ${{ secrets.enterprise_github_token || github.token }}
          copy_script_targets: ${{ steps.iltp.outputs.install_copy_script_targets }}
          debug: ${{ needs.init.outputs.debug }}

      - name: 'Stop shop'
        if: ${{ always() }}
        uses: 'OXID-eSales/github-actions/stop_shop@v4'
        with:
          debug: ${{ needs.init.outputs.debug }}

      - name: 'Rename files'
        run: |
          mv source/source/composer.lock ${{matrix.php}}-composer.lock
          mv source/source/composer.json.bak ${{matrix.php}}-composer.json

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: 'composer-${{matrix.php}}'
          path: ${{matrix.php}}-composer.*
          retention-days: 4
          overwrite: true

  process_data:
    needs: ['install']
    if: always()
    runs-on: ${{ fromJson(inputs.runs_on) }}
    steps:
      - name: 'Download artifacts'
        uses: actions/download-artifact@v4
        with:
          pattern: 'composer-*'
          merge-multiple: true
          path: files

      - name: Show files
        run: find .

      - name: Process files
        uses: actions/github-script@v7
        id: mysql
        with:
          script: |
            var fs = require('fs');
            var php_versions = JSON.parse('${{ inputs.php_versions }}');

            composer_file=`./files/${php_versions[0]}-composer.json`;
            core.info(`Load ${composer_file}`);
            var composer_json = JSON.parse(fs.readFileSync(composer_file, 'utf8'));
            var all = {};
            var require = {};
            for (r in composer_json["require"]) {
              require[r]=''
              core.info(`Add ${r} to mandatory list`);
            }

            for (var p = 0; p < php_versions.length; p++) {
              lock_file=`./files/${php_versions[p]}-composer.lock`
              core.info(`Load ${lock_file}`);
              var composer_lock = JSON.parse(fs.readFileSync(lock_file, 'utf8'));
              for (l = 0; l < composer_lock.packages.length; l++) {
                package=composer_lock.packages[l].name
                version=composer_lock.packages[l].version
                core.info(`Process ${package}:${version} from composer.lock ...`);
                if (! (package in all)) {
                  all[package]=version
                  core.info("... added to all");
                } else {
                  a=all[package];
                  i=a.indexOf(version);
                  core.info(`... already exists with value ${a} (${i})`);
                  if (a.indexOf(version) === -1) {
                    all[package] = `${all[package]} || ${version}`;
                    core.info("... extended previous definition in all");
                  }
                }
                if (package in require) {
                  if (require[package] == '') {
                    core.info("... set value in mandatory list");
                    require[package] = version;
                  } else {
                    if (require[package].indexOf(version) === -1) {
                      require[package] = `${require[package]} || ${version}`;
                      core.info("... extended previous definition in mandatory list");
                    }
                  }
                } else {
                  core.info("... ignore for mandatory list");
                }
              }
            }
            core.summary
              .addSeparator()
              .addHeading(`Pinned versions for ${branch}`, '1')
              .addCodeBlock(JSON.stringify(all,null,4), 'json')
              .write()
            core.info(`Mandatory list for ${branch}`);
            core.info("========================");
            core.info(JSON.stringify(require));
            core.info("========================");
            core.info(`Full list  for ${branch}`);
            core.info("========================");
            core.info(JSON.stringify(all));
